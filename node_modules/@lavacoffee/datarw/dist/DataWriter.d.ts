/** Binary data writer */
export declare class DataWriter {
    /** The binary data */
    bytes: Uint8Array;
    /** The data view of the binary data */
    view: DataView;
    /** The binary data size */
    size: number;
    /** Finish and get the binary data */
    finish(flags?: number): Uint8Array;
    /** Write 8 bit integer */
    write(int: number): void;
    /** Write 8 bit unsigned integer */
    writeU(uint: number): void;
    /** Write 8 bit boolean */
    writeBool(bool: boolean): void;
    /** Write 16 bit integer */
    writeShort(int: number): void;
    /** Write 16 bit unsigned integer */
    writeUShort(uint: number): void;
    /** Write 32 bit integer */
    writeInt(int: number): void;
    /** Write 32 bit unsigned integer */
    writeUInt(uint: number): void;
    /** Write 32 bit float */
    writeFloat(float: number): void;
    /** Write 64 bit bigint long */
    writeBigLong(long: bigint): void;
    /** Write 64 bit bigint unsigned long */
    writeBigULong(ulong: bigint): void;
    /** Write 64 bit long */
    writeLong(long: number): void;
    /** Write 64 bit unsigned long */
    writeULong(ulong: number): void;
    /** Write 64 bit double */
    writeDouble(double: number): void;
    /** Write modified utf-8 string */
    writeUTF(str: string): void;
    /** Write modified utf-8 string, only if the provided value is a string */
    writeNullableText(str?: string): void;
    private _advance;
    private _ensure;
}
