/** Binary data reader */
export declare class DataReader {
    /** The binary data */
    bytes: Uint8Array;
    /** The data view of the binary data */
    view: DataView;
    /** The data size */
    size: number;
    /** The flags of the data */
    flags: number;
    /** Current reading position */
    position: number;
    constructor(data: Uint8Array);
    /** Read 8 bit integer */
    read(): number;
    /** Read 8 bit unsigned integer */
    readU(): number;
    /** Read 8 bit boolean */
    readBool(): boolean;
    /** Read 16 bit integer */
    readShort(): number;
    /** Read 16 bit unsigned integer */
    readUShort(): number;
    /** Read 32 bit integer */
    readInt(): number;
    /** Read 32 bit unsigned integer */
    readUInt(): number;
    /** Read 32 bit float */
    readFloat(): number;
    /** Read 64 bit bigint long */
    readBigLong(): bigint;
    /** Read 64 bit bigint unsigned long */
    readBigULong(): bigint;
    /** Read 64 bit long */
    readLong(): number;
    /** Read 64 bit unsigned long */
    readULong(): number;
    /** Read 64 bit double */
    readDouble(): number;
    /** Read modified utf-8 string */
    readUTF(): string;
    /** Read modified utf-8 string, if exist */
    readNullableText(): string | undefined;
    private _advance;
}
